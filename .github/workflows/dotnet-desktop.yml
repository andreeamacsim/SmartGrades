name: .NET Core Desktop

on:
  pull_request:
    branches: [ "main" ]  # Trigger on pull requests to the main branch

jobs:
  build:
    strategy:
      matrix:
        configuration: [Debug, Release]  # Run on both Debug and Release configurations

    runs-on: windows-latest  # Use a Windows runner for .NET Core

    env:
      Solution_Name: SmartGrades/BackEnd/SmartGrades.sln  # Path to your .sln file
      Test_Project_Path: SmartGrades/BackEnd/BackEnd.Tests/BackEnd.Tests.csproj  # Path to your test project
      Wap_Project_Directory: your-wap-project-directory-name  # Modify if you have a WAP project
      Wap_Project_Path: your-wap-project-path  # Modify if you have a WAP project

    steps:
      # 1. Checkout the source code from the repository
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure the entire repo history is fetched

      # 2. Install .NET Core
      - name: Install .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x  # Make sure you are using the correct .NET Core version

      # 3. Install MSBuild
      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v2

      # 4. Restore project dependencies
      - name: Restore dependencies
        run: dotnet restore ${{ env.Solution_Name }}  # Restore the entire solution

      # 5. Build the solution (to check for compilation errors)
      - name: Build solution
        run: dotnet build ${{ env.Solution_Name }} --configuration ${{ matrix.configuration }}

      # 6. Execute unit tests
      - name: Execute unit tests
        run: dotnet test ${{ env.Test_Project_Path }} --configuration ${{ matrix.configuration }}

      # 7. If you have a WAP project, restore the application (modify if you're not using a WAP project)
      - name: Restore the application
        run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
        env:
          Configuration: ${{ matrix.configuration }}

      # 8. If you have a signing certificate, decode it and use it for MSIX packages
      - name: Decode the pfx
        run: |
          $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
          $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
          [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

      # 9. Create the app package
      - name: Create the app package
        run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
        env:
          Appx_Bundle: Always
          Appx_Bundle_Platforms: x86|x64
          Appx_Package_Build_Mode: StoreUpload
          Configuration: ${{ matrix.configuration }}

      # 10. Remove the certificate after creating the package
      - name: Remove the pfx
        run: Remove-Item -path $env:Wap_Project_Directory\GitHubActionsWorkflow.pfx

      # 11. Upload build artifacts (e.g., MSIX package)
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: MSIX Package
          path: ${{ env.Wap_Project_Directory }}\AppPackages
